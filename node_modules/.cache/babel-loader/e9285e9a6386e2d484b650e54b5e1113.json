{"ast":null,"code":"import axios from 'axios';\n\nfunction parseError(messages) {\n  // error\n  if (messages) {\n    if (messages instanceof Array) {\n      return Promise.reject({\n        messages: messages\n      });\n    } else {\n      return Promise.reject({\n        messages: [messages]\n      });\n    }\n  } else {\n    return Promise.reject({\n      messages: ['エラーが発生しました']\n    });\n  }\n}\n\nfunction parseBody(response) {\n  if (response.status === 200 && !response.data.status_code === 0) {\n    console.log(\"response\", response.data);\n    return response.data.body;\n  } else {\n    return parseError(response.data.error_msg);\n  }\n}\n\nlet instance = axios.create({\n  baseURL: `http://18.163.241.236:5000/api/v1`\n});\ninstance.interceptors.request.use(config => {\n  // Do something before request is sent\n  // api tokenなどを利用してheaderに載せる場合\n  const token = localStorage.getItem('token');\n  console.log(\"token:: \", token);\n\n  if (token) {\n    config.headers = {\n      'Authorization': 'Bearer ' + token\n    };\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(response => {\n  return parseBody(response);\n}, error => {\n  console.warn('Error status', error.response.status); // return Promise.reject(error)\n\n  if (error.response) {\n    return parseError(error.response.data);\n  } else {\n    return Promise.reject(error);\n  }\n});\nexport const request = instance;","map":{"version":3,"sources":["/home/batorgil/projects/personal/react-starter-theme/src/util/request.js"],"names":["axios","parseError","messages","Array","Promise","reject","parseBody","response","status","data","status_code","console","log","body","error_msg","instance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","warn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAqBC,QAArB,EAA+B;AAC3B;AACA,MAAIA,QAAJ,EAAc;AACV,QAAIA,QAAQ,YAAYC,KAAxB,EAA+B;AAC7B,aAAOC,OAAO,CAACC,MAAR,CAAe;AAAEH,QAAAA,QAAQ,EAAEA;AAAZ,OAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAOE,OAAO,CAACC,MAAR,CAAe;AAAEH,QAAAA,QAAQ,EAAE,CAACA,QAAD;AAAZ,OAAf,CAAP;AACD;AACJ,GAND,MAMO;AACH,WAAOE,OAAO,CAACC,MAAR,CAAe;AAAEH,MAAAA,QAAQ,EAAE,CAAC,YAAD;AAAZ,KAAf,CAAP;AACH;AACJ;;AAED,SAASI,SAAT,CAAoBC,QAApB,EAA8B;AAC1B,MAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2B,CAACD,QAAQ,CAACE,IAAT,CAAcC,WAAf,KAA+B,CAA9D,EAAiE;AAC/DC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAQ,CAACE,IAAjC;AACE,WAAOF,QAAQ,CAACE,IAAT,CAAcI,IAArB;AACH,GAHD,MAGO;AACH,WAAOZ,UAAU,CAACM,QAAQ,CAACE,IAAT,CAAcK,SAAf,CAAjB;AACH;AACJ;;AAED,IAAIC,QAAQ,GAAGf,KAAK,CAACgB,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAG;AADc,CAAb,CAAf;AAIAF,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAY;AAC5C;AAEA;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAb,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBU,KAAxB;;AACA,MAAGA,KAAH,EAAS;AACPD,IAAAA,MAAM,CAACI,OAAP,GAAiB;AAAE,uBAAiB,YAAYH;AAA/B,KAAjB;AACD;;AACD,SAAOD,MAAP;AACD,CAVD,EAUGK,KAAK,IAAI;AACV,SAAOtB,OAAO,CAACC,MAAR,CAAeqB,KAAf,CAAP;AACD,CAZD;AAcAX,QAAQ,CAACG,YAAT,CAAsBX,QAAtB,CAA+Ba,GAA/B,CAAoCb,QAAD,IAAc;AAC/C,SAAOD,SAAS,CAACC,QAAD,CAAhB;AACD,CAFD,EAEGmB,KAAK,IAAI;AACVf,EAAAA,OAAO,CAACgB,IAAR,CAAa,cAAb,EAA6BD,KAAK,CAACnB,QAAN,CAAeC,MAA5C,EADU,CAEV;;AACA,MAAIkB,KAAK,CAACnB,QAAV,EAAoB;AAClB,WAAON,UAAU,CAACyB,KAAK,CAACnB,QAAN,CAAeE,IAAhB,CAAjB;AACD,GAFD,MAEO;AACL,WAAOL,OAAO,CAACC,MAAR,CAAeqB,KAAf,CAAP;AACD;AACF,CAVD;AAYA,OAAO,MAAMP,OAAO,GAAGJ,QAAhB","sourcesContent":["import axios from 'axios';\n\nfunction parseError (messages) {\n    // error\n    if (messages) {\n        if (messages instanceof Array) {\n          return Promise.reject({ messages: messages })\n        } else {\n          return Promise.reject({ messages: [messages] })\n        }\n    } else {\n        return Promise.reject({ messages: ['エラーが発生しました'] })\n    }\n}\n\nfunction parseBody (response) {\n    if (response.status === 200 && !response.data.status_code === 0) {  \n      console.log(\"response\", response.data);  \n        return response.data.body;\n    } else {\n        return parseError(response.data.error_msg)\n    }\n}\n\nlet instance = axios.create({\n    baseURL: `http://18.163.241.236:5000/api/v1`\n})\n\ninstance.interceptors.request.use((config) => {\n  // Do something before request is sent\n\n  // api tokenなどを利用してheaderに載せる場合\n  const token = localStorage.getItem('token');\n  console.log(\"token:: \", token);\n  if(token){\n    config.headers = { 'Authorization': 'Bearer ' + token }\n  }\n  return config\n}, error => {\n  return Promise.reject(error)\n})\n\ninstance.interceptors.response.use((response) => {\n  return parseBody(response)\n}, error => {\n  console.warn('Error status', error.response.status)\n  // return Promise.reject(error)\n  if (error.response) {\n    return parseError(error.response.data)\n  } else {\n    return Promise.reject(error)\n  }\n})\n\nexport const request = instance"]},"metadata":{},"sourceType":"module"}